package com.gawdscape.launcher.ui;

import com.gawdscape.launcher.GawdScapeLauncher;
import com.gawdscape.launcher.util.ColorCodes;
import com.gawdscape.launcher.util.Constants;
import com.gawdscape.launcher.util.ImageUtils;
import com.gawdscape.launcher.util.OperatingSystem;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Vinnie
 */
public class LogFrame extends javax.swing.JFrame {

    private static final String SELECTION_SYMBOL = "ยง";//"c";//"\u00A7";
    private static final String LINK_ATTRIBUTE = "linkact";
    private static final String LINK_REGEX = "\\(?\\b(http://|www[.])[-A-Za-z0-9+&amp;@#/%?=~_()|!:,.;]*[-A-Za-z0-9+&amp;@#/%=~_()|]";
    private static final Pattern LINK_PATTERN = Pattern.compile(LINK_REGEX);

    private final StyledDocument log;
    private Style style;
    private Style hyperlink;

    private int searchStart = 0;
    private String find = null;
    private boolean ignoreCase = true;

    private boolean scroll = true;
    private boolean doColor;
    private boolean doLink;

    /**
     * Creates new form Console
     *
     * @param color
     * @param link
     */
    public LogFrame(boolean color, boolean link) {
	initComponents();
	log = logPane.getStyledDocument();

	if (color) {
	    style = log.addStyle("ColoredText", null);
	    doColor = true;
	}
	if (link) {
	    hyperlink = log.addStyle("HyperLink", null);
	    StyleConstants.setForeground(hyperlink, ColorCodes.Blue);
	    StyleConstants.setUnderline(hyperlink, true);
	    doLink = true;
	}

	setLocation(20, 20);
	initText();
    }

    private void initText() {
	print("GawdScape Launcher [Version " + Constants.VERSION + "]\n"
		+ "(c) " + Constants.THIS_YEAR + " GawdScape Networks.\n\n", null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane();
        logPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GawdScape Log");
        setIconImage(ImageUtils.getFavIcon());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        logPane.setEditable(false);
        logPane.setBackground(new java.awt.Color(0, 0, 0));
        logPane.setFont(new java.awt.Font("Consolas", 0, 10)); // NOI18N
        logPane.setForeground(new java.awt.Color(205, 205, 205));
        logPane.setAutoscrolls(false);
        logPane.setCaretColor(new java.awt.Color(205, 205, 205));
        logPane.setMargin(new java.awt.Insets(0, 0, 0, 0));
        logPane.setPreferredSize(new java.awt.Dimension(840, 420));
        logPane.setSelectedTextColor(new java.awt.Color(63, 63, 63));
        logPane.setSelectionColor(new java.awt.Color(255, 255, 255));
        logPane.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                logPaneMouseMoved(evt);
            }
        });
        logPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logPaneMouseClicked(evt);
            }
        });
        logPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                logPaneKeyPressed(evt);
            }
        });
        scrollPane.setViewportView(logPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
	GawdScapeLauncher.logFrame = null;
    }//GEN-LAST:event_formWindowClosed

    private void logPaneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_logPaneKeyPressed
	if ((evt.getKeyCode() == KeyEvent.VK_F) && ((evt.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
	    find = JOptionPane.showInputDialog(this, "What are you looking for?", "Find", JOptionPane.QUESTION_MESSAGE);
	    if ((find != null) && (find.length() > 0)) {
		searchStart = 0;
		findText(find, ignoreCase);
	    }
	    return;
	}
	if (evt.getKeyCode() == KeyEvent.VK_F3) {
	    if ((find != null) && (find.length() > 0)) {
		findText(find, ignoreCase);
	    } else {
		JOptionPane.showMessageDialog(this, "Please Enter Text.", "Find", JOptionPane.ERROR_MESSAGE);
	    }
	    return;
	}
	if (evt.getKeyCode() == KeyEvent.VK_F2) {
	    ignoreCase = !ignoreCase;
	    print("[Find] Ignore Case: " + ignoreCase + "\n", null);
	    return;
	}
	if (evt.getKeyCode() == KeyEvent.VK_PAUSE) {
	    scroll = !scroll;
	    print("[Log] Scroll: " + scroll + "\n", null);
	    return;
	}
	if (evt.getKeyCode() == KeyEvent.VK_HOME) {
	    logPane.setCaretPosition(0);
	    return;
	}
	if (evt.getKeyCode() == KeyEvent.VK_END) {
	    logPane.setCaretPosition(log.getLength());
	    return;
	}
	if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
	    try {
		log.remove(0, log.getLength());
	    } catch (BadLocationException ex) {
		GawdScapeLauncher.LOGGER.log(Level.SEVERE, "Error clearing log", ex);
	    }
	    return;
	}
	if (evt.getKeyCode() == KeyEvent.VK_F1) {
	    print("\n----------------------------------------------------------\n"
		    + "[Log Help] [Keyboard Shortcuts]:\n"
		    + "\tCtrl + F \t\t- Find\n"
		    + "\tF3 \t\t- Find Next\n"
		    + "\tF2 \t\t- Toggle Ignore Case\n"
		    + "\tPause Break \t- Toggle Scrolling\n"
		    + "\tHome \t\t- Top of Log\n"
		    + "\tEnd \t\t- Bottom of Log\n"
		    + "\tDelete \t\t- Clear the Log\n"
		    + "\tF1 \t\t- Log Help\n"
		    + "\n----------------------------------------------------------\n\n", null);
	}
    }//GEN-LAST:event_logPaneKeyPressed

    private void logPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logPaneMouseClicked
	try {
	    Element elem = log.getCharacterElement(logPane.viewToModel(evt.getPoint()));
	    AttributeSet as = elem.getAttributes();
	    URLLinkAction link = (URLLinkAction) as.getAttribute(LINK_ATTRIBUTE);
	    if (link != null) {
		link.execute();
	    }
	} catch (Exception ex) {
	}
    }//GEN-LAST:event_logPaneMouseClicked

    private void logPaneMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logPaneMouseMoved
	try {
	    Element elem = log.getCharacterElement(logPane.viewToModel(evt.getPoint()));
	    AttributeSet as = elem.getAttributes();
	    URLLinkAction link = (URLLinkAction) as.getAttribute(LINK_ATTRIBUTE);
	    if (link != null) {
		logPane.setCursor(new Cursor(Cursor.HAND_CURSOR));
		logPane.setToolTipText(link.uri.toString());
	    } else {
		logPane.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
		logPane.setToolTipText("");
	    }
	} catch (Exception ex) {
	}
    }//GEN-LAST:event_logPaneMouseMoved

    private boolean doScroll() {
	return !(logPane.getSelectedText() != null && !logPane.getSelectedText().isEmpty()) && scroll;
    }

    private void print(String text, Style style) {
	try {
	    log.insertString(log.getLength(), text, style);
	} catch (BadLocationException ex) {
	    GawdScapeLauncher.LOGGER.log(Level.SEVERE, "Error determining log position.", ex);
	}
	if (doScroll()) {
	    logPane.setCaretPosition(log.getLength());
	}
    }

    private void parseLinksAndPrint(String text, Style style) {
	if (!doLink) {
	    print(text, style);
	    return;
	}
	Matcher match = LINK_PATTERN.matcher(text);
	boolean found = false;
	while (match.find()) {
	    found = true;
	    String link = match.group();
	    if (link.startsWith("(")) {
		link = link.substring(1);
	    }
	    if (link.endsWith(")")) {
		link = link.substring(0, link.length() - 1);
	    }
	    int start = text.indexOf(link);
	    int end = start + link.length();
	    if (end <= start) {
		end = text.length(); // end of line
	    }

	    hyperlink.addAttribute(LINK_ATTRIBUTE, new URLLinkAction(link));

	    if (link.length() == text.length()) {
		print(link, hyperlink);
	    } else {
		String prefix = text.substring(0, start);
		String suffix = text.substring(end);
		print(prefix, style);
		print(link, hyperlink);
		print(suffix, style);
	    }
	}
	if (!found) {
	    print(text, style);
	}
    }

    private void resetFormat() {
	StyleConstants.setBold(style, false);
	StyleConstants.setStrikeThrough(style, false);
	StyleConstants.setUnderline(style, false);
	StyleConstants.setItalic(style, false);
	StyleConstants.setBackground(style, ColorCodes.Black);
    }

    public void formatAndPrint(String text) {
	if (!doColor) {
	    parseLinksAndPrint(text, null);
	    return;
	}
	String[] selection = text.split(SELECTION_SYMBOL);
	for (int i = 0; i < selection.length; i++) {
	    if (i == 0) {
		parseLinksAndPrint(selection[i], null);
		continue;
	    }

	    String thisColor = selection[i].substring(0, 1);
	    String thisText = selection[i].substring(1);

	    switch (thisColor) {
		case "k":
		    StyleConstants.setBackground(style, ColorCodes.White);
		    break;
		case "l":
		    StyleConstants.setBold(style, true);
		    break;
		case "m":
		    StyleConstants.setStrikeThrough(style, true);
		    break;
		case "n":
		    StyleConstants.setUnderline(style, true);
		    break;
		case "o":
		    StyleConstants.setItalic(style, true);
		    break;
		case "r":
		    StyleConstants.setForeground(style, ColorCodes.Default);
		    resetFormat();
		    break;
		default:
		    StyleConstants.setForeground(style, ColorCodes.getColorFromCode(thisColor));
		    resetFormat();
		    break;
	    }
	    parseLinksAndPrint(thisText, style);
	}
    }

    public void formatAndPrintLine(String text) {
	formatAndPrint(text);
	print("\n", null);
    }

    private void findText(String textToFind, boolean ignoreCase) {
	String allText = logPane.getText();
	if (ignoreCase) {
	    allText = allText.toLowerCase();
	    textToFind = textToFind.toLowerCase();
	}
	int found = allText.indexOf(textToFind, searchStart);
	if (found >= 0) {
	    searchStart = found + textToFind.length();
	    String section = allText.substring(0, searchStart);
	    int lines = section.length() - section.replace("\n", "").length();
	    logPane.setSelectionStart(found - lines);
	    logPane.setSelectionEnd(searchStart - lines);
	} else {
	    searchStart = 0;
	    JOptionPane.showMessageDialog(this, "No Matches.", "Find", JOptionPane.WARNING_MESSAGE);
	}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane logPane;
    // End of variables declaration//GEN-END:variables

    private class URLLinkAction extends AbstractAction {

	private URI uri = null;

	URLLinkAction(String url) {
	    try {
		uri = new URI(url);
	    } catch (URISyntaxException ex) {
		//GawdScapeLauncher.logger.log(Level.SEVERE, "Invalid URI: {0}", url);
	    }
	}

	protected void execute() {
	    if (uri != null) {
		OperatingSystem.openLink(uri);
	    }
	}

	@Override
	public void actionPerformed(ActionEvent e) {
	    execute();
	}
    }
}
