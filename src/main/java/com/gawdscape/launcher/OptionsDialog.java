package com.gawdscape.launcher;

import com.gawdscape.json.modpacks.ModPack;
import com.gawdscape.launcher.util.*;
import com.sun.management.OperatingSystemMXBean;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.management.ManagementFactory;
import java.net.MalformedURLException;
import java.util.logging.Level;

/**
 *
 * @author Vinnie
 */
public class OptionsDialog extends javax.swing.JDialog {

    private final long maxMemoryMB;

    /**
     * Creates new form OptionsDialog
     *
     * @param parent
     */
    public OptionsDialog(Frame parent) {
	super(parent, true);
	maxMemoryMB = ((OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean()).getTotalPhysicalMemorySize() / 1048576L;
	initComponents();
	setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        com.gawdscape.launcher.ui.DirtPanel optionsPanel = new com.gawdscape.launcher.ui.DirtPanel();
        com.gawdscape.launcher.ui.TransparentLabel titleLabel = new com.gawdscape.launcher.ui.TransparentLabel();
        com.gawdscape.launcher.ui.TransparentButton logButton = new com.gawdscape.launcher.ui.TransparentButton();
        updateButton = new com.gawdscape.launcher.ui.TransparentButton();
        com.gawdscape.launcher.ui.TransparentButton cancelButton = new com.gawdscape.launcher.ui.TransparentButton();
        com.gawdscape.launcher.ui.TransparentButton saveButton = new com.gawdscape.launcher.ui.TransparentButton();
        com.gawdscape.launcher.ui.TransparentPanel launcherSettingsPanel = new com.gawdscape.launcher.ui.TransparentPanel();
        newsCheckBox = new com.gawdscape.launcher.ui.TransparentCheckBox();
        skipLauncherCheckBox = new com.gawdscape.launcher.ui.TransparentCheckBox();
        com.gawdscape.launcher.ui.TransparentPanel logSettingsPanel = new com.gawdscape.launcher.ui.TransparentPanel();
        logCheckBox = new com.gawdscape.launcher.ui.TransparentCheckBox();
        closeLogCheckBox = new com.gawdscape.launcher.ui.TransparentCheckBox();
        colorLogCheckBox = new com.gawdscape.launcher.ui.TransparentCheckBox();
        linkLogCheckBox = new com.gawdscape.launcher.ui.TransparentCheckBox();
        com.gawdscape.launcher.ui.TransparentPanel gameSettingsPanel = new com.gawdscape.launcher.ui.TransparentPanel();
        com.gawdscape.launcher.ui.TransparentLabel gameDirLabel = new com.gawdscape.launcher.ui.TransparentLabel();
        com.gawdscape.launcher.ui.TransparentButton browseButton = new com.gawdscape.launcher.ui.TransparentButton();
        gameDirField = new javax.swing.JTextField();
        com.gawdscape.launcher.ui.TransparentLabel memoryLabel = new com.gawdscape.launcher.ui.TransparentLabel();
        allocatedMemoryLabel = new com.gawdscape.launcher.ui.TransparentLabel();
        memorySlider = new com.gawdscape.launcher.ui.TransparentSlider();
        com.gawdscape.launcher.ui.TransparentLabel minMemoryLabel = new com.gawdscape.launcher.ui.TransparentLabel();
        com.gawdscape.launcher.ui.TransparentLabel maxMemoryLabel = new com.gawdscape.launcher.ui.TransparentLabel();
        joinServerCheckBox = new com.gawdscape.launcher.ui.TransparentCheckBox();
        serverIP = new javax.swing.JTextField();
        windowSizeCheckBox = new com.gawdscape.launcher.ui.TransparentCheckBox();
        windowWidth = new javax.swing.JTextField();
        com.gawdscape.launcher.ui.TransparentLabel x = new com.gawdscape.launcher.ui.TransparentLabel();
        windowHeight = new javax.swing.JTextField();
        fullscreenCheckBox = new com.gawdscape.launcher.ui.TransparentCheckBox();
        resourcePackCheckBox = new com.gawdscape.launcher.ui.TransparentCheckBox();
        com.gawdscape.launcher.ui.TransparentButton javaButton = new com.gawdscape.launcher.ui.TransparentButton();
        com.gawdscape.launcher.ui.TransparentButton addPackButton = new com.gawdscape.launcher.ui.TransparentButton();
        com.gawdscape.launcher.ui.TransparentButton removePackButton = new com.gawdscape.launcher.ui.TransparentButton();
        com.gawdscape.launcher.ui.TransparentButton gameDirButton = new com.gawdscape.launcher.ui.TransparentButton();

        fileChooser.setCurrentDirectory(GawdScapeLauncher.config.getGameDirectory());
        fileChooser.setDialogTitle("Choose Game Directory");
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Launcher Options");
        setIconImage(ImageUtils.getFavIcon());

        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Launcher Options");
        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        logButton.setText("Open Log");
        logButton.setToolTipText("Open the Log Window");
        logButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Force Update");
        updateButton.setToolTipText("Check for updates and validate existing files.");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Discard Changes");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.setToolTipText("Save Changes");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        launcherSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Launcher Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        newsCheckBox.setSelected(GawdScapeLauncher.config.getShowNews());
        newsCheckBox.setText("Show News");
        newsCheckBox.setToolTipText("Show GawdScape news in launcher?");

        skipLauncherCheckBox.setSelected(GawdScapeLauncher.config.getSkipLauncher());
        skipLauncherCheckBox.setText("One-click Launch");
        skipLauncherCheckBox.setToolTipText("Open Minecraft without using the launcher?");

        javax.swing.GroupLayout launcherSettingsPanelLayout = new javax.swing.GroupLayout(launcherSettingsPanel);
        launcherSettingsPanel.setLayout(launcherSettingsPanelLayout);
        launcherSettingsPanelLayout.setHorizontalGroup(
            launcherSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(launcherSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(skipLauncherCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addContainerGap())
        );
        launcherSettingsPanelLayout.setVerticalGroup(
            launcherSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(launcherSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(launcherSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(skipLauncherCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        logSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        logCheckBox.setSelected(GawdScapeLauncher.config.getShowLog());
        logCheckBox.setText("Show Log");
        logCheckBox.setToolTipText("Open the Log window when the launcher starts?");

        closeLogCheckBox.setSelected(GawdScapeLauncher.config.getCloseLog());
        closeLogCheckBox.setText("Close Log with Game");
        closeLogCheckBox.setToolTipText("Close the Log window when Minecraft closes?");

        colorLogCheckBox.setSelected(GawdScapeLauncher.config.getColorLog());
        colorLogCheckBox.setText("Parse Colors");
        colorLogCheckBox.setToolTipText("Show color coded text in color?");

        linkLogCheckBox.setSelected(GawdScapeLauncher.config.getLinkLog());
        linkLogCheckBox.setText("Parse Links");
        linkLogCheckBox.setToolTipText("Make links clickable when shown?");

        javax.swing.GroupLayout logSettingsPanelLayout = new javax.swing.GroupLayout(logSettingsPanel);
        logSettingsPanel.setLayout(logSettingsPanelLayout);
        logSettingsPanelLayout.setHorizontalGroup(
            logSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(logSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(colorLogCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(logSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeLogCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(linkLogCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        logSettingsPanelLayout.setVerticalGroup(
            logSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(logSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeLogCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(logSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorLogCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(linkLogCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gameSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Game Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        gameDirLabel.setText("Game Directory:");

        browseButton.setText("Browse");
        browseButton.setToolTipText("Select a new Game Directory");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        gameDirField.setText(GawdScapeLauncher.config.getGameDir());
        gameDirField.setToolTipText("The directory where your game data will be stored.");

        memoryLabel.setText("Memory to Allocate:");

        allocatedMemoryLabel.setText(GawdScapeLauncher.config.getMemory() + " MB");

        memorySlider.setMajorTickSpacing(1024);
        memorySlider.setMaximum((int) maxMemoryMB);
        memorySlider.setMinimum(512);
        memorySlider.setMinorTickSpacing(256);
        memorySlider.setPaintTicks(true);
        memorySlider.setSnapToTicks(true);
        memorySlider.setToolTipText("Amount of RAM to allocate to Minecraft.");
        memorySlider.setValue(GawdScapeLauncher.config.getMemory());
        memorySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                memorySliderStateChanged(evt);
            }
        });

        minMemoryLabel.setText("512 MB");

        maxMemoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        maxMemoryLabel.setText((maxMemoryMB) + " MB");

        joinServerCheckBox.setSelected(GawdScapeLauncher.config.getJoinServer());
        joinServerCheckBox.setText("Join Server on Launch");
        joinServerCheckBox.setToolTipText("Automatically connect to a server on launch?");
        joinServerCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                joinServerCheckBoxItemStateChanged(evt);
            }
        });

        serverIP.setText(GawdScapeLauncher.config.getServerIP());
        serverIP.setToolTipText("IP of Server to Join");
        serverIP.setEnabled(GawdScapeLauncher.config.getJoinServer());

        windowSizeCheckBox.setSelected(GawdScapeLauncher.config.getWindowSize());
        windowSizeCheckBox.setText("Set Minecraft Window Size");
        windowSizeCheckBox.setToolTipText("Start Minecraft with a specific window size?");
        windowSizeCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                windowSizeCheckBoxItemStateChanged(evt);
            }
        });

        windowWidth.setText(GawdScapeLauncher.config.getWindowWidth());
        windowWidth.setToolTipText("Window Width");
        windowWidth.setEnabled(GawdScapeLauncher.config.getWindowSize());

        x.setText("x");

        windowHeight.setText(GawdScapeLauncher.config.getWindowHeight());
        windowHeight.setToolTipText("Window Height");
        windowHeight.setEnabled(GawdScapeLauncher.config.getWindowSize());

        fullscreenCheckBox.setSelected(GawdScapeLauncher.config.getFullscreen());
        fullscreenCheckBox.setText("Launch in Fullscreen");
        fullscreenCheckBox.setToolTipText("Start Minecraft in Fullscreen mode?");

        resourcePackCheckBox.setSelected(GawdScapeLauncher.config.getGlobalResourcePacks());
        resourcePackCheckBox.setText("Share Resource Packs");
        resourcePackCheckBox.setToolTipText("Should Mod Packs share Resource Packs or have their own?");

        javax.swing.GroupLayout gameSettingsPanelLayout = new javax.swing.GroupLayout(gameSettingsPanel);
        gameSettingsPanel.setLayout(gameSettingsPanelLayout);
        gameSettingsPanelLayout.setHorizontalGroup(
            gameSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gameSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(memorySlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(gameSettingsPanelLayout.createSequentialGroup()
                        .addComponent(minMemoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(maxMemoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(gameSettingsPanelLayout.createSequentialGroup()
                        .addGroup(gameSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(joinServerCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(windowSizeCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                            .addComponent(fullscreenCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(20, 20, 20)
                        .addGroup(gameSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(gameSettingsPanelLayout.createSequentialGroup()
                                .addComponent(windowWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(windowHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(serverIP)
                            .addComponent(resourcePackCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(gameSettingsPanelLayout.createSequentialGroup()
                        .addComponent(memoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(allocatedMemoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(gameSettingsPanelLayout.createSequentialGroup()
                        .addComponent(gameDirLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(gameDirField)
                        .addGap(18, 18, 18)
                        .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        gameSettingsPanelLayout.setVerticalGroup(
            gameSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gameSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gameDirLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gameDirField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(gameSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(memoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allocatedMemoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(memorySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gameSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minMemoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxMemoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(gameSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(joinServerCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(gameSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(windowSizeCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(windowWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(windowHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(gameSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullscreenCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resourcePackCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javaButton.setText("Java Settings");
        javaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                javaButtonActionPerformed(evt);
            }
        });

        addPackButton.setText("Add Mod Pack");
        addPackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPackButtonActionPerformed(evt);
            }
        });

        removePackButton.setText("Remove Mod Pack");
        removePackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePackButtonActionPerformed(evt);
            }
        });

        gameDirButton.setText("Open Game Dir");
        gameDirButton.setToolTipText("Open your current Game Directory");
        gameDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameDirButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(launcherSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gameSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(gameDirButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                            .addComponent(logButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(javaButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addPackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removePackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(launcherSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gameSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPackButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removePackButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gameDirButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(javaButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
	GawdScapeLauncher.config.setConfig(
		gameDirField.getText(),
		memorySlider.getValue(),
		logCheckBox.isSelected(),
		newsCheckBox.isSelected(),
		closeLogCheckBox.isSelected(),
		skipLauncherCheckBox.isSelected(),
		joinServerCheckBox.isSelected(),
		windowSizeCheckBox.isSelected(),
		fullscreenCheckBox.isSelected(),
		colorLogCheckBox.isSelected(),
		linkLogCheckBox.isSelected(),
		resourcePackCheckBox.isSelected(),
		serverIP.getText(),
		windowWidth.getText(),
		windowHeight.getText()
	);
	Config.saveConfig(GawdScapeLauncher.config);
	if (resourcePackCheckBox.isSelected()) {
	    new File(GawdScapeLauncher.config.getGameDir(), "resourcepacks").mkdirs();
	}
	dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
	dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void gameDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameDirButtonActionPerformed
	OperatingSystem.openFolder(GawdScapeLauncher.config.getGameDirectory());
    }//GEN-LAST:event_gameDirButtonActionPerformed

    private void logButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logButtonActionPerformed
	if (GawdScapeLauncher.logFrame == null) {
	    GawdScapeLauncher.logFrame = new LogFrame(colorLogCheckBox.isSelected(), linkLogCheckBox.isSelected());
	}
	GawdScapeLauncher.logFrame.setVisible(true);
	GawdScapeLauncher.logFrame.requestFocus();
    }//GEN-LAST:event_logButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
	updateButton.setEnabled(false);
	updateButton.setText("Forcing Update");
	GawdScapeLauncher.logger.info("Will update game on launch.");
	Config.forceUpdate = true;
    }//GEN-LAST:event_updateButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
	int returnVal = fileChooser.showOpenDialog(this);

	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    gameDirField.setText(fileChooser.getSelectedFile().toString());
	}
    }//GEN-LAST:event_browseButtonActionPerformed

    private void memorySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_memorySliderStateChanged
	allocatedMemoryLabel.setText(memorySlider.getValue() + " MB");
    }//GEN-LAST:event_memorySliderStateChanged

    private void joinServerCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_joinServerCheckBoxItemStateChanged
	serverIP.setEnabled(joinServerCheckBox.isSelected());
    }//GEN-LAST:event_joinServerCheckBoxItemStateChanged

    private void windowSizeCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_windowSizeCheckBoxItemStateChanged
	windowWidth.setEnabled(windowSizeCheckBox.isSelected());
	windowHeight.setEnabled(windowSizeCheckBox.isSelected());
    }//GEN-LAST:event_windowSizeCheckBoxItemStateChanged

    private void javaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_javaButtonActionPerformed
	JavaSettingsDialog dialog = new JavaSettingsDialog(null);
	dialog.setVisible(true);
    }//GEN-LAST:event_javaButtonActionPerformed

    private void addPackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPackButtonActionPerformed
	String url = JOptionPane.showInputDialog(this, "Enter Mod Pack URL:");
	if (url == null || url.isEmpty()) {
	    return;
	}
	if (url.endsWith("/")) {
	    url = url.substring(0, url.length() - 1);
	}
	try {
	    String json;
	    if (url.startsWith("file:///")) {
		json = JsonUtils.readJsonFromFile(new File(url.substring(8), "pack.json"));
	    } else {
		json = JsonUtils.readJsonFromUrl(url + "/pack.json");
	    }
	    ModPack pack = JsonUtils.getGson().fromJson(json, ModPack.class);
	    if (pack != null
		    && (pack.getId() != null
		    && pack.getVersion() != null
		    && pack.getMinecraftVersion() != null)) {
		int accept = JOptionPane.showConfirmDialog(this,
			"Do you want to add Mod Pack?\n"
			+ pack.getId()
			+ "\nVersion: " + pack.getVersion()
			+ "\nMinecraft: " + pack.getMinecraftVersion()
			+ "\nLibraries: " + pack.getLibraries()
			+ "\nMods: " + pack.getMods()
			+ "\nMain Class: " + pack.getMainClass()
			+ "\nArguments: " + pack.getMinecraftArguments()
			+ "\nGawdMod: " + pack.getGawdModVersion());
		if (accept == JOptionPane.YES_OPTION) {
		    GawdScapeLauncher.modpacks.addCustomPack(pack.getId(), url);
		    JOptionPane.showMessageDialog(this,
			    "Added Mod Pack: " + pack.getId());
		    GawdScapeLauncher.launcherFrame.loadPacks();
		}
	    }
	} catch (MalformedURLException ex) {
	    JOptionPane.showMessageDialog(this, "Invalid Mod Pack URL.", "Error", JOptionPane.ERROR_MESSAGE);
	    GawdScapeLauncher.logger.severe("Invalid Mod Pack URL.");
	} catch (FileNotFoundException ex) {
	    JOptionPane.showMessageDialog(this, "Pack data does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
	    GawdScapeLauncher.logger.severe("Pack data does not exist.");
	} catch (IOException ex) {
	    GawdScapeLauncher.logger.log(Level.SEVERE, "Error adding custom mod pack.", ex);
	}
    }//GEN-LAST:event_addPackButtonActionPerformed

    private void removePackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePackButtonActionPerformed
	String pack = GawdScapeLauncher.launcherFrame.getSelectedPack();
	try {
	    GawdScapeLauncher.modpacks.removeCustomPack(pack);
	    GawdScapeLauncher.launcherFrame.loadPacks();
	} catch (IOException ex) {
	    GawdScapeLauncher.logger.log(Level.SEVERE, "Error removing custom mod pack.", ex);
	}
	try {
	    FileUtils.delete(new File(Directories.getPackDataPath(), pack + ".json"));
	} catch (IOException ex) {
	    GawdScapeLauncher.logger.log(Level.SEVERE, "Error deleting mod pack data.", ex);
	}
	try {
	    FileUtils.delete(new File(Directories.getLogoPath(pack)));
	} catch (IOException ex) {
	    GawdScapeLauncher.logger.log(Level.SEVERE, "Error deleting mod pack logo.", ex);
	}
    }//GEN-LAST:event_removePackButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.gawdscape.launcher.ui.TransparentLabel allocatedMemoryLabel;
    private com.gawdscape.launcher.ui.TransparentCheckBox closeLogCheckBox;
    private com.gawdscape.launcher.ui.TransparentCheckBox colorLogCheckBox;
    private javax.swing.JFileChooser fileChooser;
    private com.gawdscape.launcher.ui.TransparentCheckBox fullscreenCheckBox;
    private javax.swing.JTextField gameDirField;
    private com.gawdscape.launcher.ui.TransparentCheckBox joinServerCheckBox;
    private com.gawdscape.launcher.ui.TransparentCheckBox linkLogCheckBox;
    private com.gawdscape.launcher.ui.TransparentCheckBox logCheckBox;
    private com.gawdscape.launcher.ui.TransparentSlider memorySlider;
    private com.gawdscape.launcher.ui.TransparentCheckBox newsCheckBox;
    private com.gawdscape.launcher.ui.TransparentCheckBox resourcePackCheckBox;
    private javax.swing.JTextField serverIP;
    private com.gawdscape.launcher.ui.TransparentCheckBox skipLauncherCheckBox;
    private com.gawdscape.launcher.ui.TransparentButton updateButton;
    private javax.swing.JTextField windowHeight;
    private com.gawdscape.launcher.ui.TransparentCheckBox windowSizeCheckBox;
    private javax.swing.JTextField windowWidth;
    // End of variables declaration//GEN-END:variables
}
